/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp dbus.xml -p interfaces -a adaptors
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef ADAPTORS_HPP
#define ADAPTORS_HPP

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "models.hpp"

namespace Wintermute {
    namespace Data {
        /*
         * Adaptor class for interface org.thesii.Wintermute.Data.Nodes
         */
        class NodeAdaptor: public QDBusAbstractAdaptor
        {
            Q_OBJECT
            Q_CLASSINFO("D-Bus Interface", "org.thesii.Wintermute.Data.Nodes")
            Q_CLASSINFO("D-Bus Introspection", ""
        "  <interface name=\"org.thesii.Wintermute.Data.Nodes\">\n"
        "    <signal name=\"nodeCreated\">\n"
        "      <arg direction=\"out\" type=\"s\"/>\n"
        "    </signal>\n"
        "    <method name=\"generate\">\n"
        "      <annotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n"
        "    </method>\n"
        "    <method name=\"psuedo\">\n"
        "      <arg direction=\"in\" type=\"a(iiii)\"/>\n"
        "      <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "    </method>\n"
        "    <method name=\"isPseudo\">\n"
        "      <arg direction=\"out\" type=\"b\"/>\n"
        "      <arg direction=\"in\" type=\"a(iiii)\"/>\n"
        "      <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "    </method>\n"
        "    <method name=\"exists\">\n"
        "      <arg direction=\"out\" type=\"b\"/>\n"
        "      <arg direction=\"in\" type=\"a(iiii)\"/>\n"
        "      <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "    </method>\n"
        "    <method name=\"read\">\n"
        "      <arg direction=\"in\" type=\"a(iiii)\"/>\n"
        "      <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "    </method>\n"
        "    <method name=\"write\">\n"
        "      <arg direction=\"in\" type=\"a(iiii)\"/>\n"
        "      <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "    </method>\n"
        "    <method name=\"quit\"/>\n"
        "  </interface>\n"
                "")
        public:
            NodeAdaptor(QObject *parent);
            virtual ~NodeAdaptor();

        public: // PROPERTIES
        public Q_SLOTS: // METHODS
            bool exists(const LexicalData& in0);
            Q_NOREPLY void generate();
            bool isPseudo(const LexicalData& in0);
            void pseudo(LexicalData in0);
            void quit();
            void read(LexicalData in0);
            void write(LexicalData in0);
        Q_SIGNALS: // SIGNALS
            void nodeCreated(const QString &in0);
        };

        /*
         * Adaptor class for interface org.thesii.Wintermute.Data.Rules
         */
        class RuleAdaptor: public QDBusAbstractAdaptor
        {
            Q_OBJECT
            Q_CLASSINFO("D-Bus Interface", "org.thesii.Wintermute.Data.Rules")
            Q_CLASSINFO("D-Bus Introspection", ""
        "  <interface name=\"org.thesii.Wintermute.Data.Rules\">\n"
        "    <signal name=\"ruleCreated\">\n"
        "      <arg direction=\"out\" type=\"s\"/>\n"
        "    </signal>\n"
        "    <method name=\"read\">\n"
        "      <arg direction=\"in\" type=\"RulesChain\">\n"
        "        <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "      </arg>\n"
        "    </method>\n"
        "    <method name=\"write\">\n"
        "      <arg direction=\"in\" type=\"a\">\n"
        "        <annotation value=\"LexicalData\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
        "      </arg>\n"
        "    </method>\n"
        "    <method name=\"exists\">\n"
        "      <arg direction=\"out\" type=\"b\"/>\n"
        "      <arg direction=\"in\" type=\"s\"/>\n"
        "      <arg direction=\"in\" type=\"s\"/>\n"
        "    </method>\n"
        "    <method name=\"quit\"/>\n"
        "  </interface>\n"
                "")
        public:
            RuleAdaptor(QObject *parent);
            virtual ~RuleAdaptor();

        public: // PROPERTIES
        public Q_SLOTS: // METHODS
            bool exists(const QString &in0, const QString &in1);
            void quit();
            void read(LexicalData in0);
            void write(LexicalData in0);
        Q_SIGNALS: // SIGNALS
            void ruleCreated(const QString &in0);
        };

        /*
         * Adaptor class for interface org.thesii.Wintermute.Data.System
         */
        class SystemAdaptor: public QDBusAbstractAdaptor
        {
            Q_OBJECT
            Q_CLASSINFO("D-Bus Interface", "org.thesii.Wintermute.Data.System")
            Q_CLASSINFO("D-Bus Introspection", ""
        "  <interface name=\"org.thesii.Wintermute.Data.System\">\n"
        "    <property access=\"readwrite\" type=\"s\" name=\"Directory\"/>\n"
        "    <signal name=\"stopped\"/>\n"
        "    <signal name=\"started\"/>\n"
        "    <method name=\"quit\"/>\n"
        "    <method name=\"stop\">\n"
        "      <annotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n"
        "    </method>\n"
        "    <method name=\"start\">\n"
        "      <annotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n"
        "    </method>\n"
        "    <method name=\"localeExists\">\n"
        "      <arg direction=\"out\" type=\"b\"/>\n"
        "      <arg direction=\"in\" type=\"s\"/>\n"
        "    </method>\n"
        "  </interface>\n"
                "")
        public:
            SystemAdaptor(QObject *parent);
            virtual ~SystemAdaptor();

        public: // PROPERTIES
            Q_PROPERTY(QString Directory READ directory WRITE setDirectory)
            QString directory() const;
            void setDirectory(const QString &value);

        public Q_SLOTS: // METHODS
            bool localeExists(const QString &in0);
            void quit();
            Q_NOREPLY void start();
            Q_NOREPLY void stop();
        Q_SIGNALS: // SIGNALS
            void started();
            void stopped();
        };
    }
}

#endif
