/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp dbus.xml -p interfaces -a adaptors
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "adaptors.hpp"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

using namespace Wintermute::Data;

/*
 * Implementation of adaptor class NodesAdaptor
 */

NodeAdaptor::NodeAdaptor(QObject *parent) : QDBusAbstractAdaptor(parent) {
    setAutoRelaySignals(true);
}

NodeAdaptor::~NodeAdaptor() {
    // destructor
}

bool NodeAdaptor::exists(const LexicalData& in0) {
    // handle method call org.thesii.Wintermute.Data.Nodes.exists
    bool out0;
    QMetaObject::invokeMethod(parent(), "exists", Q_RETURN_ARG(bool, out0), Q_ARG(LexicalData, in0));
    return out0;
}

void NodeAdaptor::generate(){
    // handle method call org.thesii.Wintermute.Data.Nodes.generate
    QMetaObject::invokeMethod(parent(), "generate");
}

bool NodeAdaptor::isPseudo(const LexicalData& in0)
{
    // handle method call org.thesii.Wintermute.Data.Nodes.isPseudo
    bool out0;
    QMetaObject::invokeMethod(parent(), "isPseudo", Q_RETURN_ARG(bool, out0), Q_ARG(LexicalData, in0));
    return out0;
}

void NodeAdaptor::pseudo(LexicalData in0)
{
    // handle method call org.thesii.Wintermute.Data.Nodes.psuedo
    QMetaObject::invokeMethod(parent(), "pseudo", Q_ARG(LexicalData, in0));
}

void NodeAdaptor::quit()
{
    // handle method call org.thesii.Wintermute.Data.Nodes.quit
    QMetaObject::invokeMethod(parent(), "quit");
}

void NodeAdaptor::read(LexicalData in0)
{
    // handle method call org.thesii.Wintermute.Data.Nodes.read
    QMetaObject::invokeMethod(parent(), "read", Q_ARG(LexicalData, in0));
}

void NodeAdaptor::write(LexicalData in0)
{
    // handle method call org.thesii.Wintermute.Data.Nodes.write
    QMetaObject::invokeMethod(parent(), "write", Q_ARG(LexicalData, in0));
}

/*
 * Implementation of adaptor class RuleAdaptor
 */

RuleAdaptor::RuleAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

RuleAdaptor::~RuleAdaptor()
{
    // destructor
}

bool RuleAdaptor::exists(const QString &in0, const QString &in1)
{
    // handle method call org.thesii.Wintermute.Data.Rules.exists
    bool out0;
    QMetaObject::invokeMethod(parent(), "exists", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

void RuleAdaptor::quit()
{
    // handle method call org.thesii.Wintermute.Data.Rules.quit
    QMetaObject::invokeMethod(parent(), "quit");
}

void RuleAdaptor::read(LexicalData in0)
{
    // handle method call org.thesii.Wintermute.Data.Rules.read
    QMetaObject::invokeMethod(parent(), "read", Q_ARG(LexicalData, in0));
}

void RuleAdaptor::write(LexicalData in0)
{
    // handle method call org.thesii.Wintermute.Data.Rules.write
    QMetaObject::invokeMethod(parent(), "write", Q_ARG(LexicalData, in0));
}

/*
 * Implementation of adaptor class SystemAdaptor
 */

SystemAdaptor::SystemAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SystemAdaptor::~SystemAdaptor()
{
    // destructor
}

QString SystemAdaptor::directory() const
{
    // get the value of property Directory
    return qvariant_cast< QString >(parent()->property("Directory"));
}

void SystemAdaptor::setDirectory(const QString &value)
{
    // set the value of property Directory
    parent()->setProperty("Directory", qVariantFromValue(value));
}

bool SystemAdaptor::localeExists(const QString &in0)
{
    // handle method call org.thesii.Wintermute.Data.System.localeExists
    bool out0;
    QMetaObject::invokeMethod(parent(), "localeExists", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

void SystemAdaptor::quit()
{
    // handle method call org.thesii.Wintermute.Data.System.quit
    QMetaObject::invokeMethod(parent(), "quit");
}

void SystemAdaptor::start()
{
    // handle method call org.thesii.Wintermute.Data.System.start
    QMetaObject::invokeMethod(parent(), "start");
}

void SystemAdaptor::stop()
{
    // handle method call org.thesii.Wintermute.Data.System.stop
    QMetaObject::invokeMethod(parent(), "stop");
}

