/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a adaptors -p interfaces -v dbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef INTERFACES_HPP
#define INTERFACES_HPP

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QDebug>
#include "models.hpp"

namespace Wintermute {
    namespace Data {
        class NodeInterface: public QDBusAbstractInterface
        {
            Q_OBJECT
        public:
            static inline const char *staticInterfaceName()
            { return "org.thesii.Wintermute.Data.Nodes"; }

        public:
            NodeInterface();

            ~NodeInterface();

        public Q_SLOTS: // METHODS
            inline QDBusPendingReply<bool> exists(LexicalData in0)
            {
                qDebug() << "(data) [NodeInterface]" << qVariantFromValue(in0).toString();
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("exists"), argumentList);
            }

            inline Q_NOREPLY void generate()
            {
                QList<QVariant> argumentList;
                callWithArgumentList(QDBus::NoBlock, QLatin1String("generate"), argumentList);
            }

            inline QDBusPendingReply<bool> isPseudo(LexicalData in0)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("isPseudo"), argumentList);
            }

            inline QDBusPendingReply<> quit()
            {
                QList<QVariant> argumentList;
                return asyncCallWithArgumentList(QLatin1String("quit"), argumentList);
            }

            inline QDBusPendingReply<LexicalData> read(LexicalData in0)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("read"), argumentList);
            }

            inline QDBusPendingReply<LexicalData> write(LexicalData in0)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("write"), argumentList);
            }

        Q_SIGNALS: // SIGNALS
            void nodeCreated(const QString &in0);
        };

        class RuleInterface: public QDBusAbstractInterface
        {
            Q_OBJECT
        public:
            static inline const char *staticInterfaceName()
            { return "org.thesii.Wintermute.Data.Rules"; }

        public:
            RuleInterface();

            ~RuleInterface();

        public Q_SLOTS: // METHODS
            inline QDBusPendingReply<bool> exists(const QString &in0, const QString &in1)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0) << qVariantFromValue(in1);
                return asyncCallWithArgumentList(QLatin1String("exists"), argumentList);
            }

            inline QDBusPendingReply<> quit()
            {
                QList<QVariant> argumentList;
                return asyncCallWithArgumentList(QLatin1String("quit"), argumentList);
            }

            inline QDBusPendingReply<RulesChain> read(RulesChain in0)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("read"), argumentList);
            }

            inline QDBusPendingReply<RulesChain> write(RulesChain in0)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("write"), argumentList);
            }

        Q_SIGNALS: // SIGNALS
            void ruleCreated(const QString &in0);
        };

        class SystemInterface: public QDBusAbstractInterface
        {
            Q_OBJECT
        public:
            static inline const char *staticInterfaceName()
            { return "org.thesii.Wintermute.Data.System"; }

        public:
            SystemInterface();
            ~SystemInterface();

            Q_PROPERTY(QString Directory READ directory WRITE setDirectory)
            inline QString directory() const
            { return qvariant_cast< QString >(property("Directory")); }
            inline void setDirectory(const QString &value)
            { setProperty("Directory", qVariantFromValue(value)); }

        public Q_SLOTS: // METHODS
            inline QDBusPendingReply<bool> localeExists(const QString &in0)
            {
                QList<QVariant> argumentList;
                argumentList << qVariantFromValue(in0);
                return asyncCallWithArgumentList(QLatin1String("localeExists"), argumentList);
            }

            inline QDBusPendingReply<> quit()
            {
                QList<QVariant> argumentList;
                return asyncCallWithArgumentList(QLatin1String("quit"), argumentList);
            }

            inline Q_NOREPLY void start()
            {
                QList<QVariant> argumentList;
                callWithArgumentList(QDBus::NoBlock, QLatin1String("start"), argumentList);
            }

            inline Q_NOREPLY void stop()
            {
                QList<QVariant> argumentList;
                callWithArgumentList(QDBus::NoBlock, QLatin1String("stop"), argumentList);
            }

        Q_SIGNALS: // SIGNALS
            void started();
            void stopped();
        };
    }
}
#endif
